import React, { useState } from "react";
import { Article } from "@/entities/Article";
import { UploadFile } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckCircle2, Upload, Loader2, Info } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function Submit() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    title: "",
    subtitle: "",
    author: "",
    author_email: "",
    author_bio: "",
    category: "",
    content: "",
    excerpt: "",
    featured_image: "",
    published_date: new Date().toISOString().split('T')[0],
    is_featured: false,
    read_time: 5,
    status: "pending"
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [success, setSuccess] = useState(false);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    setIsUploading(true);
    try {
      const { file_url } = await UploadFile({ file });
      handleInputChange('featured_image', file_url);
    } catch (error) {
      console.error("Error uploading image:", error);
    }
    setIsUploading(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      await Article.create(formData);
      setSuccess(true);
      setTimeout(() => {
        navigate(createPageUrl("Home"));
      }, 3000);
    } catch (error) {
      console.error("Error submitting article:", error);
    }

    setIsSubmitting(false);
  };

  if (success) {
    return (
      <div className="max-w-2xl mx-auto px-4 py-20 text-center">
        <CheckCircle2 className="w-16 h-16 text-green-600 mx-auto mb-4" />
        <h1 className="font-serif text-4xl font-bold mb-4">Submission Received!</h1>
        <p className="text-gray-600 text-lg mb-6">
          Thank you for your submission. Our editorial team will review your work and 
          get back to you within 3-5 business days.
        </p>
        <Alert className="bg-blue-50 border-blue-200 text-left">
          <Info className="h-5 w-5 text-blue-600" />
          <AlertDescription className="text-blue-800">
            You'll receive an email at <strong>{formData.author_email}</strong> once 
            your submission has been reviewed. If approved, your article will be published on The Colonial.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-12">
      <div className="mb-12">
        <h1 className="font-serif text-5xl md:text-6xl font-bold mb-4">Submit Your Work</h1>
        <div className="w-24 h-1 bg-black mb-6" />
        <Alert className="bg-amber-50 border-amber-200 mb-6">
          <Info className="h-5 w-5 text-amber-600" />
          <AlertDescription className="text-amber-800">
            <strong>Editorial Review Process:</strong> All submissions are reviewed by our editorial team. 
            We'll respond within 3-5 business days with approval or constructive feedback. Only approved 
            articles are published on the site.
          </AlertDescription>
        </Alert>
        <p className="text-xl text-gray-600 leading-relaxed">
          Share your essays, stories, research, satire, or creative work with our readers. 
          We're looking for thought-provoking, well-crafted pieces that add value to the conversation.
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8 bg-white p-8 border-2 border-gray-200">
        <div className="grid md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="title" className="text-sm font-semibold uppercase tracking-wide">
              Title *
            </Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              placeholder="Your article headline"
              required
              className="border-2"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="text-sm font-semibold uppercase tracking-wide">
              Category *
            </Label>
            <Select
              value={formData.category}
              onValueChange={(value) => handleInputChange('category', value)}
              required
            >
              <SelectTrigger className="border-2">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="essay">Essay</SelectItem>
                <SelectItem value="research">Research Paper</SelectItem>
                <SelectItem value="short_story">Short Story</SelectItem>
                <SelectItem value="op_ed">Op-Ed</SelectItem>
                <SelectItem value="satirical_news">Satirical News</SelectItem>
                <SelectItem value="cartoon">Cartoon</SelectItem>
                <SelectItem value="puzzle">Puzzle</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="subtitle" className="text-sm font-semibold uppercase tracking-wide">
            Subtitle
          </Label>
          <Input
            id="subtitle"
            value={formData.subtitle}
            onChange={(e) => handleInputChange('subtitle', e.target.value)}
            placeholder="A compelling subheading"
            className="border-2"
          />
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="author" className="text-sm font-semibold uppercase tracking-wide">
              Author Name *
            </Label>
            <Input
              id="author"
              value={formData.author}
              onChange={(e) => handleInputChange('author', e.target.value)}
              placeholder="Your name"
              required
              className="border-2"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="author_email" className="text-sm font-semibold uppercase tracking-wide">
              Your Email *
            </Label>
            <Input
              id="author_email"
              type="email"
              value={formData.author_email}
              onChange={(e) => handleInputChange('author_email', e.target.value)}
              placeholder="your@email.com"
              required
              className="border-2"
            />
            <p className="text-xs text-gray-500">We'll contact you here about your submission</p>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="author_bio" className="text-sm font-semibold uppercase tracking-wide">
            Author Bio
          </Label>
          <Input
            id="author_bio"
            value={formData.author_bio}
            onChange={(e) => handleInputChange('author_bio', e.target.value)}
            placeholder="A brief bio about yourself"
            className="border-2"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="excerpt" className="text-sm font-semibold uppercase tracking-wide">
            Excerpt
          </Label>
          <Textarea
            id="excerpt"
            value={formData.excerpt}
            onChange={(e) => handleInputChange('excerpt', e.target.value)}
            placeholder="A brief excerpt or lede (2-3 sentences)"
            rows={3}
            className="border-2"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="content" className="text-sm font-semibold uppercase tracking-wide">
            Article Content * (Markdown supported)
          </Label>
          <Textarea
            id="content"
            value={formData.content}
            onChange={(e) => handleInputChange('content', e.target.value)}
            placeholder="Write your article here... You can use markdown formatting."
            rows={15}
            required
            className="border-2 font-mono"
          />
          <p className="text-sm text-gray-500">
            Tip: Use markdown for formatting (# for headings, ** for bold, etc.)
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="read_time" className="text-sm font-semibold uppercase tracking-wide">
              Estimated Read Time (minutes)
            </Label>
            <Input
              id="read_time"
              type="number"
              value={formData.read_time}
              onChange={(e) => handleInputChange('read_time', parseInt(e.target.value))}
              placeholder="5"
              className="border-2"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="image" className="text-sm font-semibold uppercase tracking-wide">
              Featured Image
            </Label>
            <Input
              id="image"
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              disabled={isUploading}
              className="border-2"
            />
            {isUploading && <Loader2 className="w-5 h-5 animate-spin" />}
          </div>
        </div>

        {formData.featured_image && (
          <img 
            src={formData.featured_image} 
            alt="Preview" 
            className="max-h-48 object-cover border-2"
          />
        )}

        <div className="flex justify-end pt-6 border-t-2 border-gray-200">
          <Button
            type="submit"
            disabled={isSubmitting}
            className="bg-black hover:bg-gray-800 text-white px-8 py-3 text-lg"
          >
            {isSubmitting ? (
              <>
                <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                Submitting...
              </>
            ) : (
              <>
                <Upload className="w-5 h-5 mr-2" />
                Submit for Review
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}
